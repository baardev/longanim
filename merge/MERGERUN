#!/bin/bash

function pause(){
   read -p "$*"
}
cd /home/jw/src/longanim/merge

#W=512
#H=512
#PROJECT="X"
#echo "xxxxx"
CURVE="test"
while getopts ":w:h:p:f:t:c:" d; do
    echo "[${d}]"
    case "${d}" in
        w)
            W=${OPTARG}
            ;;
        h)
            H=${OPTARG}
            ;;
        p)
            PROJECT=${OPTARG}
            ;;
        f)
            IMAGE1=${OPTARG}
            ;;
        t)
            IMAGE2=${OPTARG}
            ;;
        c)
            CURVE=${OPTARG}
            ;;
        *)
            usage
            ;;
    esac
done

STUB=${IMAGE1}_${IMAGE2}
NAME=${STUB}.mp4
FPS="30"  #! bump the fps tp 30
SECS=`date +%s`
echo "---------------------------------------------------"
echo "export IMAGE1=${IMAGE1}"
echo "export IMAGE2=${IMAGE2}"
echo "export FPS=${FPS}"
echo "export W=${W}"
echo "export H=${H}"
echo "export PROJECT=${PROJECT}"
echo "export STUB=${STUB}"
echo "export NAME=${STUB}"

#read -t 10 -p "Clear previously created ${PROJECT} files in stage_1/${PROJECT} and stage_2/${PROJECT} ?" yn
#case $yn in
#    [Yy]* )
#      mv /home/jw/src/longanim/merge/stage_1/${PROJECT} mv /home/jw/src/longanim/merge/stage_2/${PROJECT}_${SECS};
#      mv /home/jw/src/longanim/merge/stage_2/${PROJECT} mv /home/jw/src/longanim/merge/stage_2/${PROJECT}_${SECS};
#    ;;
#    * ) echo "Please answer yes or no.";;
#esac
#-------------------------------------------------------------------------------------------
#- Run 'mask_v0.json' workflow, which creates the interpolated frames
#-------------------------------------------------------------------------------------------
echo "┌─────────────────────────────────────────────"
echo "│ CREATE FRAMES"
echo "└─────────────────────────────────────────────"

if test -f stage_1/${PROJECT}/${STUB}/*_1.00-0.00_00001_.png; then
  echo "▓▓▓▓▓▓ Using existing files in [stage_1//${PROJECT}/${STUB}]"
else
  echo "▓▓▓▓▓▓ Building new files in [stage_1/${PROJECT}/${STUB}]"
  #! create frames
  CMD="./qmasks_v0.py \
   --output_dir /home/jw/src/longanim/merge/stage_1/${PROJECT}/${STUB} \
   --input_dir /home/jw/src/longanim/merge/images \
   --images ${IMAGE1}.png,${IMAGE2}.png \
   --curve ${CURVE} \
   --res ${W}:${H} &"
  ~/src/longanim/msg.py "${CMD}"
  eval "${CMD}"
  #^ set target_weight to 0.5 to end a middle of interp
  #! need to wait for the que to finish by looking for the last filename created
  ./wait_for_glob.py stage_1/${PROJECT}/${STUB}/*_1.00-0.00_00001_.png
fi

#-------------------------------------------------------------------------------------------
#- Create main interps video
#-------------------------------------------------------------------------------------------
echo "┌─────────────────────────────────────────────"
echo "│ CREATE MAIN INTERPS VIDEO..."
echo "└─────────────────────────────────────────────"
if test -f stage_2/${PROJECT}/${STUB}_00001.mp4; then
  echo "Using existing files in [stage_1/${PROJECT}/${STUB}]"
else
  #rm stage_3/${STUB}.mp4
  CMD="./interpolate_v0.py \
  --name ${STUB} \
  --input_dir stage_1/${PROJECT}/${STUB}/ \
  --output_dir stage_2/${PROJECT}/${STUB}/ \
  --frame_rate 8 \
  --multiplier 2 \
  --image_load_cap 1000 \
  --interpolate 1"
~/src/longanim/msg.py "${CMD}"
eval "${CMD}"
echo "┌─────────────────────────────────────────────"
echo "│ ...finished submitting queue"
echo "└─────────────────────────────────────────────"
./wait_for_glob.py stage_2/${PROJECT}/${STUB}/${STUB}_00001.mp4
  #! if teh file is big, needs time to finish writing
#  sleep 15
# ffmpeg -y -loglevel warning -i stage_2/${PROJECT}/${STUB}_00001.mp4 -filter:v fps=${FPS} stage_2/${PROJECT}/${FPS}_${STUB}_00001.mp4
  #zip ${STUB}_MAIN.zip stage_2/*.png
fi

#! clean up unnecessary file
echo "Deleting PNG files in [stage_2/${PROJECT}/${STUB}]"
/bin/rm stage_2/${PROJECT}/${STUB}/*.png

echo "Building 'list' in [stage_2/${PROJECT}/${STUB}]"
CMD="find stage_2/${PROJECT} -type f |grep mp4 |grep 0000|sort | awk '{print \"file \\x27/home/jw/store/src/longanim/merge/\" \$1 \"\\x27\"}' >  stage_2/${PROJECT}/list.txt &"
~/src/longanim/msg.py "${CMD}"
read -t 5 -p "Pausing 5 seconds"
eval "${CMD}"

echo "Merge files to [stage_2/${PROJECT}/${PROJECT}.mp4]"
#! merge into 1 video

echo "READING: stage_2/${PROJECT}/list.txt"
echo "MERGING: stage_2/${PROJECT}/${PROJECT}.mp4"

CMD="ffmpeg -y -loglevel warning -f concat -safe 0 -i /home/jw/store/src/longanim/merge/stage_2/${PROJECT}/list.txt -c copy /home/jw/store/src/longanim/merge/stage_2/${PROJECT}/${PROJECT}.mp4 &"
~/src/longanim/msg.py "${CMD}"
eval "${CMD}"
read -t 16 -p "Pausing 16 seconds"


#pause


#^ skip the rest if not resolving to original images
#^ ==========================================================================================================
exit

#-------------------------------------------------------------------------------------------
#- Interp first first 2 'pre' frames only
#-------------------------------------------------------------------------------------------
if test -f stage_2/${STUB}_pre_00001.mp4; then
  echo "Using exsiting file [stage_2/${STUB}1_00001.mp4]"
else
  #! add first frame from original images
  cp images/${IMAGE1}.png stage_1/${STUB}/00000.png

  ./interpolate_v0.py \
  --name ${STUB}_pre \
  --input_dir stage_1/${STUB} \
  --frame_rate 8 \
  --multiplier 10 \
  --image_load_cap 2 \
  --interpolate 1


  ./wait_for_glob.py stage_2/${STUB}_pre_00001.mp4
  read -t 15 -p "Pausing 15 seconds"
  #zip ${STUB}_FIRST.zip stage_2/*.png
  rm stage_1/${STUB}/00000.png
#  ffmpeg -y -loglevel warning -i stage_2/${STUB}_pre_00001.mp4 -filter:v fps=${FPS} stage_2/${FPS}_${STUB}_pre_00001.mp4
fi

#-------------------------------------------------------------------------------------------
#- Interp last  2 'post' frames only
#-------------------------------------------------------------------------------------------
if test -f stage_2/${STUB}_post_00001.mp4; then
  echo "Using existing file [stage_2/${STUB}2_00001.mp4]"
else
  mkdir tmp123
  cp  stage_1/${STUB}/0054*.png tmp123/1.png
  cp images/${IMAGE2}.png tmp123/2.png

  #! add last frame from original images
  #cp ${IMAGE2}.png stage_1/99999.png

  ./interpolate_v0.py \
  --name ${STUB}_post \
  --input_dir tmp123 \
  --frame_rate 8 \
  --multiplier 10 \
  --image_load_cap 2 \
  --interpolate 1
  #--lastclip

  ./wait_for_glob.py stage_2/${STUB}_post_00001.mp4
#  ffmpeg -y -loglevel warning -i stage_2/${STUB}_post_00001.mp4 -filter:v fps=${FPS} stage_2/${FPS}_${STUB}_post_00001.mp4
  #sleep 15
  #zip ${STUB}_LAST.zip stage_2/*.png
  #rm -rf tmp123
fi

#-------------------------------------------------------------------------------------------
#- Merge clips
#-------------------------------------------------------------------------------------------


#echo "file 'stage_2/${STUB}_pre_00001.mp4" > stage_2/list
#echo "file 'stage_2/${STUB}_00001.mp4" >> stage_2/list
#echo "file 'stage_2/${STUB}_post_00001.mp4" >> stage_2/list

#echo "file 'stage_2/${FPS}_${STUB}_pre_00001.mp4" > list
#echo "file 'stage_2/${FPS}_${STUB}_00001.mp4" >> list
#echo "file 'stage_2/${FPS}_${STUB}_post_00001.mp4" >> list

#! merge into 1 video
#rm stage_3/${FPS}_${STUB}.mp4
#ffmpeg -y -loglevel warning -f concat -safe 0 -i list -c copy stage_3/${PROJECT}.mp4






